
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi1.practice1.parse;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.compi1.practice1.errors.ErrorL;
import com.compi1.practice1.strcuts.Instruction;
import java.util.LinkedList;
import com.compi1.practice1.strcuts.Occurence;
import com.compi1.practice1.strcuts.Print;
import com.compi1.practice1.symbol.Operators;
import com.compi1.practice1.symbol.Type;
import com.compi1.practice1.symbol.TypeData;
import com.compi1.practice1.symbol.ValueAssign;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCodigo extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserCodigoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCodigo() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCodigo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCodigo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\005\000\002\007\006\000\002" +
    "\007\007\000\002\007\010\000\002\007\011\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\011\003" +
    "\000\002\011\003\000\002\004\004\000\002\004\004\000" +
    "\002\005\004\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\024\003\017\004\010\006\025\007\007\010" +
    "\005\011\020\012\022\016\016\020\013\001\002\000\024" +
    "\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\016\ufffe\020\ufffe\001\002\000\004\021\056\001\002" +
    "\000\004\002\055\001\002\000\004\013\053\001\002\000" +
    "\006\004\040\005\041\001\002\000\024\002\ufffb\004\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\016\ufffb\020" +
    "\ufffb\001\002\000\024\002\ufff9\004\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\016\ufff9\020\ufff9\001\002\000" +
    "\004\013\036\001\002\000\024\002\uffee\004\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\016\uffee\020\uffee\001" +
    "\002\000\024\002\uffef\004\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\016\uffef\020\uffef\001\002\000\004\014" +
    "\033\001\002\000\024\002\ufffd\004\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\016\ufffd\020\ufffd\001\002\000" +
    "\004\021\032\001\002\000\024\002\ufffc\004\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\016\ufffc\020\ufffc\001" +
    "\002\000\004\021\031\001\002\000\024\002\000\004\010" +
    "\006\025\007\007\010\005\011\020\012\022\016\016\020" +
    "\013\001\002\000\024\002\ufffa\004\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\016\ufffa\020\ufffa\001\002\000" +
    "\004\013\026\001\002\000\004\006\027\001\002\000\024" +
    "\002\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\016\ufff2\020\ufff2\001\002\000\024\002\uffff\004\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\016\uffff\020" +
    "\uffff\001\002\000\024\002\uffeb\004\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\016\uffeb\020\uffeb\001\002\000" +
    "\024\002\uffed\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\016\uffed\020\uffed\001\002\000\004\017\034\001" +
    "\002\000\004\015\035\001\002\000\024\002\uffea\004\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\016\uffea\020" +
    "\uffea\001\002\000\004\020\037\001\002\000\024\002\ufff1" +
    "\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\016" +
    "\ufff1\020\ufff1\001\002\000\006\004\042\005\043\001\002" +
    "\000\024\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\016\ufff8\020\ufff8\001\002\000\006\004\044" +
    "\005\045\001\002\000\024\002\ufff7\004\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\016\ufff7\020\ufff7\001\002" +
    "\000\006\004\046\005\047\001\002\000\024\002\ufff6\004" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\016\ufff6" +
    "\020\ufff6\001\002\000\006\004\050\005\051\001\002\000" +
    "\024\002\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\016\ufff5\020\ufff5\001\002\000\004\005\052\001" +
    "\002\000\024\002\ufff4\004\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\016\ufff4\020\ufff4\001\002\000\024\002" +
    "\ufff3\004\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\016\ufff3\020\ufff3\001\002\000\004\007\054\001\002\000" +
    "\024\002\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\016\ufff0\020\ufff0\001\002\000\004\002\001\001" +
    "\002\000\024\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\016\uffec\020\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\024\002\005\003\022\004\014\005\013\006" +
    "\003\007\020\010\010\011\023\012\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\014\005\013\006" +
    "\027\007\020\010\010\011\023\012\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCodigo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCodigo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCodigo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<ErrorL> errors = new LinkedList<>();
    public LinkedList<String> lista = new LinkedList<>();
    public LinkedList<Occurence> ocurrenceList = new LinkedList<>();
    public LinkedList<String> messages = new LinkedList<>();

    public LinkedList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(message, line, column, "Sintactico", message));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error sintactico irrecuperable en la Linea " +
        (s.left) + " Columna "+ s.right+ ". Componente " + s.value + " no reconocido.";
        messages.add(message);
    }

    private String quitarComillas(String identificador){
        return identificador.replace("\"", "");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCodigo$actions {
  private final ParserCodigo parser;

  /** Constructor */
  CUP$ParserCodigo$actions(ParserCodigo parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCodigo$do_action_part00000000(
    int                        CUP$ParserCodigo$act_num,
    java_cup.runtime.lr_parser CUP$ParserCodigo$parser,
    java.util.Stack            CUP$ParserCodigo$stack,
    int                        CUP$ParserCodigo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCodigo$result;

      /* select the action based on the action number */
      switch (CUP$ParserCodigo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).value;
		RESULT = start_val;
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCodigo$parser.done_parsing();
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= statements 
            {
              LinkedList<Instruction> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		LinkedList<Instruction> statement = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
            RESULT = statement;
        
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statements statement 
            {
              LinkedList<Instruction> RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).right;
		LinkedList<Instruction> statements = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Instruction statement = (Instruction)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                RESULT = statements;
                RESULT.add(statement);
              
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statement 
            {
              LinkedList<Instruction> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Instruction statement = (Instruction)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                RESULT = new LinkedList<>();
                RESULT.add(statement);
               
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= error 
            {
              LinkedList<Instruction> RESULT =null;
		int errorleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int errorright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object error = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                 errors.add(new ErrorL(error.toString(), errorleft, errorright, "SINTACTICO", "NO SE ESPERABA ESTE CARACTER"));
              
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= header 
            {
              Instruction RESULT =null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Instruction header = (Instruction)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                RESULT = header;
              
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= text 
            {
              Instruction RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Instruction text = (Instruction)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                RESULT = text;
              
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= lists 
            {
              Instruction RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Instruction lists = (Instruction)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                RESULT = lists;
              
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= specialOperation 
            {
              Instruction RESULT =null;
		int specialleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int specialright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Instruction special = (Instruction)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                RESULT = special;
              
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
            int line = idHeaderleft + 1;
            int column = idHeaderleft + 1;
            String reformat = "<h1>" + idHeader + "</h1>";
            ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
            RESULT = valueAssign;
          
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header ::= HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h2>" + idHeader + "</h2>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
           
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header ::= HASH HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h3>" + idHeader + "</h3>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
            
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // header ::= HASH HASH HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h4>" + idHeader + "</h4>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
            
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // header ::= HASH HASH HASH HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h5>" + idHeader + "</h5>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
            
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // header ::= HASH HASH HASH HASH HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h6>" + idHeader + "</h6>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
            
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // text ::= BOLD PARAGRAPH BOLD 
            {
              Instruction RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).value;
		
           int line = paraleft + 1;
           int column = paraleft + 1;
           String reformat = "<b><i>" + para + "</i></b>";
           ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, para);
           RESULT = new Print(line, column, valueAssign);
        
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("text",6, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // text ::= MULT PARAGRAPH MULT 
            {
              Instruction RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).value;
		
            int line = paraleft + 1;
            int column = paraleft + 1;
            String reformat = "<b><i>" + para + "</i></b>";
            ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, para);
            RESULT = new Print(line, column, valueAssign);
          
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("text",6, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // text ::= BOLDITALIC PARAGRAPH BOLDITALIC 
            {
              Instruction RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).value;
		
            int line = paraleft + 1;
            int column = paraleft + 1;
            String reformat = "<b><i>" + para + "</i></b>";
            ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, para);
            RESULT = new Print(line, column, valueAssign);
           
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("text",6, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lists ::= listOrder 
            {
              Instruction RESULT =null;
		int listOrderleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int listOrderright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Instruction listOrder = (Instruction)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;

              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("lists",7, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lists ::= listNotOrder 
            {
              Instruction RESULT =null;
		int listNotOrderleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int listNotOrderright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Instruction listNotOrder = (Instruction)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;

              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("lists",7, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listOrder ::= LISTORDERONE ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;

              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("listOrder",2, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listOrder ::= LISTORDEN ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;

              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("listOrder",2, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listNotOrder ::= LISTPLUS ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.peek()).value;

              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("listNotOrder",3, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // specialOperation ::= PRINT LPAREN WORD RPAREN 
            {
              Instruction RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-1)).value;
		
                        int line = wordleft + 1;
                        int column = wordleft + 1;
                        ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, word);
                        RESULT = valueAssign;
                    
              CUP$ParserCodigo$result = parser.getSymbolFactory().newSymbol("specialOperation",8, ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.elementAt(CUP$ParserCodigo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCodigo$stack.peek()), RESULT);
            }
          return CUP$ParserCodigo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCodigo$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCodigo$do_action(
    int                        CUP$ParserCodigo$act_num,
    java_cup.runtime.lr_parser CUP$ParserCodigo$parser,
    java.util.Stack            CUP$ParserCodigo$stack,
    int                        CUP$ParserCodigo$top)
    throws java.lang.Exception
    {
              return CUP$ParserCodigo$do_action_part00000000(
                               CUP$ParserCodigo$act_num,
                               CUP$ParserCodigo$parser,
                               CUP$ParserCodigo$stack,
                               CUP$ParserCodigo$top);
    }
}

}
