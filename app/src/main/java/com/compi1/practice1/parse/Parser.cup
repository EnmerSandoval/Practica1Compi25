package com.compi1.practice1.parse;

import java_cup.runtime.*;
import java.util.ArrayList;

import com.compi1.practice1.errors.ErrorL;
import com.compi1.practice1.strcuts.Instruction;
import java.util.LinkedList;
import com.compi1.practice1.strcuts.Occurence;
import com.compi1.practice1.strcuts.Print;
import com.compi1.practice1.symbol.Operators;
import com.compi1.practice1.symbol.Type;
import com.compi1.practice1.symbol.TypeData;
import com.compi1.practice1.symbol.ValueAssign;
import com.compi1.practice1.strcuts.Assign;

import com.compi1.practice1.strcuts.ExecuteOperation;


class Parser;

parser code {:
    public LinkedList<ErrorL> errors = new LinkedList<>();
    public LinkedList<String> lista  = new LinkedList<>();
    public LinkedList<Occurence> occurenceLinkedList = new LinkedList<>();
    public LinkedList<String> messages = new LinkedList<>();

    public LinkedList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(message, line, column, "Sintactico", message));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error sintactico irrecuperable en la Linea " +
        (s.left) + " Columna "+ s.right+ ". Componente " + s.value + " no reconocido.";
        messages.add(message);
    }

    private String quitarComillas(String identificador){
        return identificador.replace("\"", "");
    }

:}

terminal ID, EQUALS, PLOT, COMMA, OPERADORES;
terminal PLUS, MINUS, MULT, DIV, POW, LPAREN, RPAREN, PRINT, WORD, NUM, FORMAT,  DOT, REPORTES, ERRORES;

non terminal LinkedList<Instruction> ini, statement;
non terminal Instruction aritmetic;
non terminal Instruction assignation, aritmeticOperation, expression;
non terminal Instruction specialOperation;

precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left POW;
precedence left LPAREN, RPAREN;

start with ini;

ini::= statement:statement {: RESULT = statement;:}
       | error:e ini
       {:
            errors.add(new ErrorL(e.toString(), eleft, eright, "SINTACTICO", "NO SE ESPERABA ESTE CARACTER"));
       :}
       ;

statement::= statement:statement aritmetic:aritmetic
            {:
                RESULT = statement;
                RESULT.add(aritmetic);
            :}
            | aritmetic:aritmetic
                {:
                    RESULT = new LinkedList<>();
                    RESULT.add(aritmetic);
                :}
            ;

aritmetic::= assignation:assignation
             {:
                RESULT = assignation;
             :}
           | aritmeticOperation:aritmeticOperation
             {:
                RESULT = aritmeticOperation;
             :}
           | specialOperation:specialOperation
             {:
                RESULT = specialOperation;
             :}
           ;

assignation::= ID:id EQUALS expression:exp
                {:
                   int line = expleft;
                   int column = expright;
                   Assign assign = new Assign(id.toString(), exp, line, column);
                   RESULT = assign;
                :}
            ;

expression::= expression:exp1 PLUS expression:exp2
              {:
                int line = exp1left+1;
                int column = exp1right+1;
                RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.PLUS);
              :}
            | expression:exp1 MINUS expression:exp2
              {:
                int line = exp1left+1;
                int column = exp1right+1;
                RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.MINUS);
              :}

            | expression:exp1 MULT expression:exp2
                {:
                    int line = exp1left+1;
                    int column = exp1right+1;
                    RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.MULT);
                :}
            | expression:exp1 DIV expression:exp2
                {:
                    int line = exp1left+1;
                    int column = exp1right+1;
                    RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.DIV);
                :}
            | expression:exp1 POW expression:exp2
                {:
                    int line = exp1left+1;
                    int column = exp1right+1;
                    RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.POW);
                :}
            | LPAREN expression:exp RPAREN
                {:
                    RESULT = exp;
                :}
            | WORD:word
                {:
                    int line = wordleft+1;
                    int column = wordright+1;
                    RESULT = new ValueAssign(new Type(TypeData.STRING), line, column, word);
                :}
            | NUM:num
               {:
                    int line = numleft;
                    int column = numright;
                    RESULT = new ValueAssign(new Type(TypeData.ENTERO), line, column, num);
               :}
            ;

specialOperation::= PRINT LPAREN expression:exp RPAREN
                    {:
                        int line = expleft + 1;
                        int column = expleft + 1;
                        RESULT = new Print(line, column, exp);
                    :}
                   | FORMAT LPAREN expression:exp RPAREN
                    {:

                    :}
                   | PLOT LPAREN expression COMMA NUM COMMA NUM RPAREN
                    {:

                    :}
                   | REPORTES DOT OPERADORES LPAREN RPAREN
                    {:

                    :}
                   | REPORTES DOT ERRORES LPAREN RPAREN
                    {:

                    :}
                  ;