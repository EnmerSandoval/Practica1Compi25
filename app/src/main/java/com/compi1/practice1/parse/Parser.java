
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi1.practice1.parse;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.compi1.practice1.errors.ErrorL;
import com.compi1.practice1.strcuts.Instruction;
import java.util.LinkedList;
import com.compi1.practice1.strcuts.Occurence;
import com.compi1.practice1.strcuts.Print;
import com.compi1.practice1.symbol.Operators;
import com.compi1.practice1.symbol.Type;
import com.compi1.practice1.symbol.TypeData;
import com.compi1.practice1.symbol.ValueAssign;
import com.compi1.practice1.strcuts.ExecuteOperation;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\004\000\002\012\005\000" +
    "\002\012\006\000\002\012\007\000\002\012\010\000\002" +
    "\012\011\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\014\003\000\002\014\003\000\002\004\004" +
    "\000\002\004\004\000\002\005\004\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\006\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\015\006\000\002\015\006\000\002\015\012\000" +
    "\002\015\007\000\002\015\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\034\003\024\004\014\006\033\007\012\010" +
    "\010\011\025\012\027\014\013\020\017\025\023\030\031" +
    "\031\006\034\030\001\002\000\004\002\uffec\001\002\000" +
    "\004\002\uffeb\001\002\000\004\023\116\001\002\000\004" +
    "\002\000\001\002\000\004\014\115\001\002\000\004\002" +
    "\114\001\002\000\004\013\112\001\002\000\004\015\110" +
    "\001\002\000\006\004\075\005\076\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\uffea\001\002\000\004\013\073" +
    "\001\002\000\004\002\ufff0\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\ufff1\001\002\000\004\023\070\001\002" +
    "\000\004\002\uffff\001\002\000\004\014\067\001\002\000" +
    "\004\002\ufffe\001\002\000\004\014\066\001\002\000\004" +
    "\033\057\001\002\000\004\023\036\001\002\000\004\002" +
    "\ufffc\001\002\000\004\013\034\001\002\000\004\006\035" +
    "\001\002\000\004\002\ufff4\001\002\000\006\023\040\026" +
    "\037\001\002\000\022\002\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\024\uffe2\032\uffe2\001\002\000\006\023" +
    "\040\026\037\001\002\000\016\016\045\017\046\020\043" +
    "\021\047\022\044\024\042\001\002\000\004\002\uffe0\001" +
    "\002\000\006\023\040\026\037\001\002\000\006\023\040" +
    "\026\037\001\002\000\006\023\040\026\037\001\002\000" +
    "\006\023\040\026\037\001\002\000\006\023\040\026\037" +
    "\001\002\000\022\002\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\044\024\uffe5\032\uffe5\001\002\000\022\002\uffe7" +
    "\016\uffe7\017\uffe7\020\043\021\047\022\044\024\uffe7\032" +
    "\uffe7\001\002\000\022\002\uffe8\016\uffe8\017\uffe8\020\043" +
    "\021\047\022\044\024\uffe8\032\uffe8\001\002\000\022\002" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4" +
    "\032\uffe4\001\002\000\022\002\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\044\024\uffe6\032\uffe6\001\002\000\016" +
    "\016\045\017\046\020\043\021\047\022\044\024\056\001" +
    "\002\000\022\002\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\024\uffe3\032\uffe3\001\002\000\006\035\060\036" +
    "\061\001\002\000\004\023\064\001\002\000\004\023\062" +
    "\001\002\000\004\024\063\001\002\000\004\002\uffdd\001" +
    "\002\000\004\024\065\001\002\000\004\002\uffde\001\002" +
    "\000\004\002\uffed\001\002\000\004\002\uffef\001\002\000" +
    "\006\023\040\026\037\001\002\000\016\016\045\017\046" +
    "\020\043\021\047\022\044\024\072\001\002\000\004\002" +
    "\uffe1\001\002\000\004\020\074\001\002\000\004\002\ufff3" +
    "\001\002\000\006\004\077\005\100\001\002\000\004\002" +
    "\ufffa\001\002\000\006\004\101\005\102\001\002\000\004" +
    "\002\ufff9\001\002\000\006\004\103\005\104\001\002\000" +
    "\004\002\ufff8\001\002\000\006\004\105\005\106\001\002" +
    "\000\004\002\ufff7\001\002\000\004\005\107\001\002\000" +
    "\004\002\ufff6\001\002\000\004\002\ufff5\001\002\000\006" +
    "\023\040\026\037\001\002\000\016\002\uffe9\016\045\017" +
    "\046\020\043\021\047\022\044\001\002\000\004\007\113" +
    "\001\002\000\004\002\ufff2\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffee\001\002\000\006\023\040\026\037" +
    "\001\002\000\016\016\045\017\046\020\043\021\047\022" +
    "\044\032\120\001\002\000\004\027\121\001\002\000\004" +
    "\032\122\001\002\000\004\027\123\001\002\000\004\024" +
    "\124\001\002\000\004\002\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\030\002\010\003\020\004\021\005\017\006" +
    "\003\007\004\011\006\012\025\013\014\014\031\015\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\040\001\001\000\002\001\001\000" +
    "\004\010\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\053\001\001\000\004\010\052\001\001\000" +
    "\004\010\051\001\001\000\004\010\050\001\001\000\004" +
    "\010\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<ErrorL> errors = new LinkedList<>();
    public LinkedList<String> lista  = new LinkedList<>();
    public LinkedList<Occurence> occurenceLinkedList = new LinkedList<>();
    public LinkedList<String> messages = new LinkedList<>();

    public LinkedList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(message, line, column, "Sintactico", message));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error sintactico irrecuperable en la Linea " +
        (s.left) + " Columna "+ s.right+ ". Componente " + s.value + " no reconocido.";
        messages.add(message);
    }

    private String quitarComillas(String identificador){
        return identificador.replace("\"", "");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction start_val = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= statement 
            {
              Instruction RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction statement = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = statement;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= header 
            {
              Instruction RESULT =null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction header = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = headerleft;
                int column =  headerright;
                RESULT = header;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= text 
            {
              Instruction RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction text = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = text;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= lists 
            {
              Instruction RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction lists = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = lists;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= aritmetic 
            {
              Instruction RESULT =null;
		int aritmeticleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aritmeticright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction aritmetic = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = aritmetic;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = idHeaderleft + 1;
            int column = idHeaderleft + 1;
            String reformat = "<h1>" + idHeader + "</h1>";
            ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
            RESULT = valueAssign;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h2>" + idHeader + "</h2>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= HASH HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h3>" + idHeader + "</h3>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header ::= HASH HASH HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h4>" + idHeader + "</h4>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header ::= HASH HASH HASH HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h5>" + idHeader + "</h5>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // header ::= HASH HASH HASH HASH HASH HASH IDHEADER 
            {
              Instruction RESULT =null;
		int idHeaderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idHeaderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idHeader = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = idHeaderleft + 1;
                int column = idHeaderleft + 1;
                String reformat = "<h6>" + idHeader + "</h6>";
                ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, idHeader);
                RESULT = valueAssign;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // text ::= BOLD PARAGRAPH BOLD 
            {
              Instruction RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           int line = paraleft + 1;
           int column = paraleft + 1;
           String reformat = "<b><i>" + para + "</i></b>";
           ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, para);
           RESULT = new Print(line, column, valueAssign);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // text ::= MULT PARAGRAPH MULT 
            {
              Instruction RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            int line = paraleft + 1;
            int column = paraleft + 1;
            String reformat = "<b><i>" + para + "</i></b>";
            ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, para);
            RESULT = new Print(line, column, valueAssign);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // text ::= BOLDITALIC PARAGRAPH BOLDITALIC 
            {
              Instruction RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            int line = paraleft + 1;
            int column = paraleft + 1;
            String reformat = "<b><i>" + para + "</i></b>";
            ValueAssign valueAssign = new ValueAssign(new Type(TypeData.STRING), line, column, para);
            RESULT = new Print(line, column, valueAssign);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lists ::= listOrder 
            {
              Instruction RESULT =null;
		int listOrderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listOrderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction listOrder = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lists",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lists ::= listNotOrder 
            {
              Instruction RESULT =null;
		int listNotOrderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listNotOrderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction listNotOrder = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lists",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listOrder ::= LISTORDERONE ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listOrder",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listOrder ::= LISTORDEN ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listOrder",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listNotOrder ::= LISTPLUS ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listNotOrder",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aritmetic ::= assignation 
            {
              Instruction RESULT =null;
		int assignationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction assignation = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = assignation;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aritmetic ::= aritmeticOperation 
            {
              Instruction RESULT =null;
		int aritmeticOperationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aritmeticOperationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction aritmeticOperation = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = aritmeticOperation;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aritmetic ::= specialOperation 
            {
              Instruction RESULT =null;
		int specialOperationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int specialOperationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction specialOperation = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = specialOperation;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignation ::= ID EQUALS expression 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   // RESULT = new Assign();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignation",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression PLUS expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = exp1left+1;
                int column = exp1right+1;
                RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.PLUS);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression MINUS expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = exp1left+1;
                int column = exp1right+1;
                RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.MINUS);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression MULT expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = exp1left+1;
                    int column = exp1right+1;
                    RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.MULT);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression DIV expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = exp1left+1;
                    int column = exp1right+1;
                    RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.DIV);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression POW expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = exp1left+1;
                    int column = exp1right+1;
                    RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.POW);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= LPAREN expression RPAREN 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = exp;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= WORD 
            {
              Instruction RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = wordleft+1;
                    int column = wordright+1;
                    RESULT = new ValueAssign(new Type(TypeData.STRING), line, column, word);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // specialOperation ::= PRINT LPAREN expression RPAREN 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        int line = expleft + 1;
                        int column = expleft + 1;
                        RESULT = new Print(line, column, exp);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // specialOperation ::= FORMAT LPAREN expression RPAREN 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // specialOperation ::= PLOT LPAREN expression COMMA NUM COMMA NUM RPAREN 
            {
              Instruction RESULT =null;
		

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // specialOperation ::= REPORTES DOT OPERADORES LPAREN RPAREN 
            {
              Instruction RESULT =null;
		

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // specialOperation ::= REPORTES DOT ERRORES LPAREN RPAREN 
            {
              Instruction RESULT =null;
		

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
