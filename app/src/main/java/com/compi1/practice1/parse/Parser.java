
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi1.practice1.parse;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.compi1.practice1.errors.ErrorL;
import com.compi1.practice1.strcuts.Instruction;
import java.util.LinkedList;
import com.compi1.practice1.strcuts.Occurence;
import com.compi1.practice1.strcuts.Print;
import com.compi1.practice1.symbol.Operators;
import com.compi1.practice1.symbol.Type;
import com.compi1.practice1.symbol.TypeData;
import com.compi1.practice1.symbol.ValueAssign;
import com.compi1.practice1.strcuts.Assign;
import com.compi1.practice1.strcuts.ExecuteOperation;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\007\003\000\002\010\006\000\002\010\006" +
    "\000\002\010\012\000\002\010\007\000\002\010\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\016\003\013\004\010\006\007\020\015\023" +
    "\005\025\012\001\002\000\016\002\ufffc\004\ufffc\006\ufffc" +
    "\020\ufffc\023\ufffc\025\ufffc\001\002\000\004\016\065\001" +
    "\002\000\016\002\ufffd\004\ufffd\006\ufffd\020\ufffd\023\ufffd" +
    "\025\ufffd\001\002\000\004\016\056\001\002\000\004\005" +
    "\054\001\002\000\016\002\000\004\010\006\007\020\015" +
    "\023\005\025\012\001\002\000\004\024\044\001\002\000" +
    "\016\003\013\004\010\006\007\020\015\023\005\025\012" +
    "\001\002\000\016\002\ufffb\004\ufffb\006\ufffb\020\ufffb\023" +
    "\ufffb\025\ufffb\001\002\000\004\016\021\001\002\000\016" +
    "\002\ufffa\004\ufffa\006\ufffa\020\ufffa\023\ufffa\025\ufffa\001" +
    "\002\000\004\002\020\001\002\000\004\002\001\001\002" +
    "\000\010\016\024\021\023\022\022\001\002\000\034\002" +
    "\ufff1\004\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\017\ufff1\020\ufff1\023\ufff1\025\ufff1\001" +
    "\002\000\034\002\ufff2\004\ufff2\006\ufff2\007\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\023" +
    "\ufff2\025\ufff2\001\002\000\010\016\024\021\023\022\022" +
    "\001\002\000\016\011\031\012\032\013\026\014\033\015" +
    "\030\017\027\001\002\000\010\016\024\021\023\022\022" +
    "\001\002\000\016\002\ufff0\004\ufff0\006\ufff0\020\ufff0\023" +
    "\ufff0\025\ufff0\001\002\000\010\016\024\021\023\022\022" +
    "\001\002\000\010\016\024\021\023\022\022\001\002\000" +
    "\010\016\024\021\023\022\022\001\002\000\010\016\024" +
    "\021\023\022\022\001\002\000\034\002\ufff5\004\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\030" +
    "\017\ufff5\020\ufff5\023\ufff5\025\ufff5\001\002\000\034\002" +
    "\ufff7\004\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\013\026" +
    "\014\033\015\030\017\ufff7\020\ufff7\023\ufff7\025\ufff7\001" +
    "\002\000\034\002\ufff8\004\ufff8\006\ufff8\007\ufff8\011\ufff8" +
    "\012\ufff8\013\026\014\033\015\030\017\ufff8\020\ufff8\023" +
    "\ufff8\025\ufff8\001\002\000\034\002\ufff4\004\ufff4\006\ufff4" +
    "\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017" +
    "\ufff4\020\ufff4\023\ufff4\025\ufff4\001\002\000\034\002\ufff6" +
    "\004\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\030\017\ufff6\020\ufff6\023\ufff6\025\ufff6\001\002" +
    "\000\016\011\031\012\032\013\026\014\033\015\030\017" +
    "\042\001\002\000\034\002\ufff3\004\ufff3\006\ufff3\007\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3\020" +
    "\ufff3\023\ufff3\025\ufff3\001\002\000\004\002\uffff\001\002" +
    "\000\006\010\045\026\046\001\002\000\004\016\051\001" +
    "\002\000\004\016\047\001\002\000\004\017\050\001\002" +
    "\000\016\002\uffec\004\uffec\006\uffec\020\uffec\023\uffec\025" +
    "\uffec\001\002\000\004\017\052\001\002\000\016\002\uffed" +
    "\004\uffed\006\uffed\020\uffed\023\uffed\025\uffed\001\002\000" +
    "\016\002\ufffe\004\ufffe\006\ufffe\020\ufffe\023\ufffe\025\ufffe" +
    "\001\002\000\010\016\024\021\023\022\022\001\002\000" +
    "\030\002\ufff9\004\ufff9\006\ufff9\011\031\012\032\013\026" +
    "\014\033\015\030\020\ufff9\023\ufff9\025\ufff9\001\002\000" +
    "\010\016\024\021\023\022\022\001\002\000\016\007\060" +
    "\011\031\012\032\013\026\014\033\015\030\001\002\000" +
    "\004\022\061\001\002\000\004\007\062\001\002\000\004" +
    "\022\063\001\002\000\004\017\064\001\002\000\016\002" +
    "\uffee\004\uffee\006\uffee\020\uffee\023\uffee\025\uffee\001\002" +
    "\000\010\016\024\021\023\022\022\001\002\000\016\011" +
    "\031\012\032\013\026\014\033\015\030\017\067\001\002" +
    "\000\016\002\uffef\004\uffef\006\uffef\020\uffef\023\uffef\025" +
    "\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\016\002\016\003\010\004\005\005\003\006" +
    "\013\010\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\052\005\003\006\013\010\015\001\001\000\002" +
    "\001\001\000\016\002\042\003\010\004\005\005\003\006" +
    "\013\010\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\040\001\001\000\002\001\001\000\004\007" +
    "\037\001\001\000\002\001\001\000\004\007\036\001\001" +
    "\000\004\007\035\001\001\000\004\007\034\001\001\000" +
    "\004\007\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\054\001\001\000\002\001" +
    "\001\000\004\007\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\065\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<ErrorL> errors = new LinkedList<>();
    public LinkedList<String> lista  = new LinkedList<>();
    public LinkedList<Occurence> occurenceLinkedList = new LinkedList<>();
    public LinkedList<String> messages = new LinkedList<>();

    public LinkedList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(message, line, column, "Sintactico", message));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error sintactico irrecuperable en la Linea " +
        (s.left) + " Columna "+ s.right+ ". Componente " + s.value + " no reconocido.";
        messages.add(message);
    }

    private String quitarComillas(String identificador){
        return identificador.replace("\"", "");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= statement 
            {
              LinkedList<Instruction> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> statement = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = statement;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= error ini 
            {
              LinkedList<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            errors.add(new ErrorL(e.toString(), eleft, eright, "SINTACTICO", "NO SE ESPERABA ESTE CARACTER"));
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= statement aritmetic 
            {
              LinkedList<Instruction> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> statement = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aritmeticleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aritmeticright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction aritmetic = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = statement;
                RESULT.add(aritmetic);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= aritmetic 
            {
              LinkedList<Instruction> RESULT =null;
		int aritmeticleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aritmeticright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction aritmetic = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(aritmetic);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // aritmetic ::= assignation 
            {
              Instruction RESULT =null;
		int assignationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction assignation = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = assignation;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // aritmetic ::= aritmeticOperation 
            {
              Instruction RESULT =null;
		int aritmeticOperationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aritmeticOperationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction aritmeticOperation = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = aritmeticOperation;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // aritmetic ::= specialOperation 
            {
              Instruction RESULT =null;
		int specialOperationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int specialOperationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction specialOperation = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = specialOperation;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignation ::= ID EQUALS expression 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   int line = expleft;
                   int column = expright;
                   Assign assign = new Assign(id.toString(), exp, line, column);
                   RESULT = assign;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= expression PLUS expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = exp1left+1;
                int column = exp1right+1;
                RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.PLUS);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= expression MINUS expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int line = exp1left+1;
                int column = exp1right+1;
                RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.MINUS);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= expression MULT expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = exp1left+1;
                    int column = exp1right+1;
                    RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.MULT);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= expression DIV expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = exp1left+1;
                    int column = exp1right+1;
                    RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.DIV);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression POW expression 
            {
              Instruction RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction exp1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction exp2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = exp1left+1;
                    int column = exp1right+1;
                    RESULT = new ExecuteOperation(line, column, exp1, exp2, Operators.POW);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= LPAREN expression RPAREN 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = exp;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= WORD 
            {
              Instruction RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = wordleft+1;
                    int column = wordright+1;
                    RESULT = new ValueAssign(new Type(TypeData.STRING), line, column, word);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= NUM 
            {
              Instruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = numleft;
                    int column = numright;
                    RESULT = new ValueAssign(new Type(TypeData.ENTERO), line, column, num);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // specialOperation ::= PRINT LPAREN expression RPAREN 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        int line = expleft + 1;
                        int column = expleft + 1;
                        RESULT = new Print(line, column, exp);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // specialOperation ::= FORMAT LPAREN expression RPAREN 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // specialOperation ::= PLOT LPAREN expression COMMA NUM COMMA NUM RPAREN 
            {
              Instruction RESULT =null;
		

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // specialOperation ::= REPORTES DOT OPERADORES LPAREN RPAREN 
            {
              Instruction RESULT =null;
		

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // specialOperation ::= REPORTES DOT ERRORES LPAREN RPAREN 
            {
              Instruction RESULT =null;
		

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialOperation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
